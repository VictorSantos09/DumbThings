@page "/DumbPages/RickAndMorty"

@using Application.Dto;
@using Dumb.Application
@using Dumb.Application.Interfaces
@using Dumb.Application.Services
@using Dumb.Application.Dto
@using System.Net.Http.Headers;
@using Dumb.Domain.Entities;
@using Dumb.Domain;

@inject IBaseRequest _request

<MudPaper Class="d-flex justify-content-center flex-grow-1 gap-4" Elevation="0">
    <MudForm>
        <h2 class="d-flex justify-content-center text-uppercase">who am i?</h2>
        <MudImage Src="@CorrectChoiceImage" Width="300" Height="300" Alt="Rick and Morty Random Caracter" Elevation="25" Class="rounded-lg ma-4" />
        <MudRadioGroup @bind-SelectedOption="@SelectedOption" Class="row row-cols-auto">
            <MudRadio Option="@("Radio 1")" Color="Color.Warning" onchange="@(() => CheckOption(Option1))">@Option1</MudRadio>
            <MudRadio Option="@("Radio 2")" Color="Color.Warning" change="@(() => CheckOption(Option2))">@Option2</MudRadio>
            <MudRadio Option="@("Radio 3")" Color="Color.Warning" change="@(() => CheckOption(Option3))">@Option3</MudRadio>
        </MudRadioGroup>
    </MudForm>
</MudPaper>

@code {
    private string CorrectChoiceImage { get; set; }
    private string CorrectChoice { get; set; }
    private string Option1 { get; set; }
    private string Option2 { get; set; }
    private string Option3 { get; set; }
    private string BackgroundColor { get; set; } = "white";
    private string SelectedOption;

    protected override async Task OnInitializedAsync()
    {
        List<RickAndMortyEntity> entities = new List<RickAndMortyEntity>();
        var totalRequest = 3;
        Random rand = new Random();

        _request.InitializeClient();

        for (int i = 0; i < totalRequest; i++)
        {
            var url = IEndPoints.RickAndMorty;
            var index = rand.Next(IEndPoints.RickAndMortyTotalCharacters);

            var request = $"{url}{index}";

            var entity = await _request.LoadContent<RickAndMortyEntity>(request, new RickAndMortyEntity());

            entities.Add(entity);
        }

        var correctChoice = rand.Next(totalRequest);
        CorrectChoiceImage = entities.ElementAt(correctChoice).Image;
        CorrectChoice = entities.ElementAt(correctChoice).Name;

        Option1 = entities.ElementAt(0).Name;
        Option2 = entities.ElementAt(1).Name;
        Option3 = entities.ElementAt(2).Name;
    }

    private async Task<bool> CheckOption(string option)
    {
        var delay = 1000;
        if (option == CorrectChoice && option != null)
        {
            BackgroundColor = "green";
            await Task.Delay(delay);
            BackgroundColor = "white";
            await OnInitializedAsync();
            return true;
        }
        else
        {
            BackgroundColor = "red";
            await Task.Delay(delay);
            BackgroundColor = "white";
            await OnInitializedAsync();
            return false;
        }
    }
}